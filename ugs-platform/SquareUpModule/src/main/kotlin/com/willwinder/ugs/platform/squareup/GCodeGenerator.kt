/*
    Copyprintln 2017 Will Winder

    This file is part of Universal Gcode Sender (UGS).

    UGS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    UGS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with UGS.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.willwinder.ugs.platform.squareup

import com.willwinder.universalgcodesender.gcode.util.GcodeUtils
import com.willwinder.universalgcodesender.model.UnitUtils
import java.io.PrintWriter
import java.util.Date

/*
  @author dastultz
  Created on Mar 13, 2019
*/

class GCodeGenerator(
    private val output: PrintWriter
) {

    private var _absolute = true

    fun begin(units: UnitUtils.Units) {
        output.println("(Generated by Universal GCode Sender ${Date()})")
        output.println("${GcodeUtils.unitCommand(units)} G91.1")
        absolute()
    }

    fun end() {
        spindleOff()
        output.println("M30")
    }

    fun absolute() {
        if (!_absolute) {
            _absolute = true
            output.println("G90")
        }
    }

    fun relative() {
        if (_absolute) {
            _absolute = false
            output.println("G91")
        }
    }

    fun planeXY() = output.println("G17")

    fun spindleOn() = output.println("M3")

    fun spindleOff() = output.println("M5")

    fun feedAbsolute(x: Double? = null, y: Double? = null, z: Double? = null, feed: Double? = null) {
        moveAbsolute("G1", x, y, z, feed)
    }

    fun feedRelative(x: Double? = null, y: Double? = null, z: Double? = null, feed: Double? = null) {
        moveRelative("G1", x, y, z, feed)
    }

    fun rapid(x: Double? = null, y: Double? = null, z: Double? = null) = moveAbsolute("G0", x, y, z)

    private fun moveAbsolute(g: String, x: Double?, y: Double?, z: Double?, feed: Double? = null) {
        absolute()
        generateMove(g, x, y, z, feed)
    }

    private fun moveRelative(g: String, x: Double?, y: Double?, z: Double?, feed: Double? = null) {
        relative()
        generateMove(g, x, y, z, feed)
    }

    private fun generateMove(g: String, x: Double?, y: Double?, z: Double?, feed: Double? = null) {
        if (x != null || y != null || z != null) {
            output.print("$g ")
            if (x != null) output.print("X$x ")
            if (y != null) output.print("Y$y ")
            if (z != null) output.print("Z$z ")
        }
        if (feed != null) {
            output.print("F$feed")
        }
        output.println()
    }

    // X and Y to end position
    // I and J relative center of rotation
    // G2 clockwise
    // G3 counter clockwise
    fun clockWiseArcRel(x: Double, y: Double, i: Double, j: Double) {
        relative()
        output.println("G2 X$x Y$y I$i J$j")
    }

    fun counterClockWiseArcRel(x: Double, y: Double, i: Double, j: Double) {
        relative()
        output.println("G3 X$x Y$y I$i J$j")
    }
}
